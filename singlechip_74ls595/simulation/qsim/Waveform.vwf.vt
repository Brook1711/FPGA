// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2018 19:32:55"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    singlechip_74ls595_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module singlechip_74ls595_test_vlg_sample_tst(
	G,
	RCK,
	SCK,
	SCLR,
	SI,
	clk,
	sampler_tx
);
input  G;
input  RCK;
input  SCK;
input  SCLR;
input  SI;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(G or RCK or SCK or SCLR or SI or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module singlechip_74ls595_test_vlg_check_tst (
	Q,
	QH,
	sampler_rx
);
input [7:0] Q;
input  QH;
input sampler_rx;

reg [7:0] Q_expected;
reg  QH_expected;

reg [7:0] Q_prev;
reg  QH_prev;

reg [7:0] Q_expected_prev;
reg  QH_expected_prev;

reg [7:0] last_Q_exp;
reg  last_QH_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q_prev = Q;
	QH_prev = QH;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
	QH_expected_prev = QH_expected;
end


// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 

// expected QH
initial
begin
	QH_expected = 1'bX;
end 
// generate trigger
always @(Q_expected or Q or QH_expected or QH)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q = %b | expected QH = %b | ",Q_expected_prev,QH_expected_prev);
	$display("| real Q = %b | real QH = %b | ",Q_prev,QH_prev);
`endif
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end
	if (
		( QH_expected_prev !== 1'bx ) && ( QH_prev !== QH_expected_prev )
		&& ((QH_expected_prev !== last_QH_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QH :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QH_expected_prev);
		$display ("     Real value = %b", QH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_QH_exp = QH_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module singlechip_74ls595_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg G;
reg RCK;
reg SCK;
reg SCLR;
reg SI;
reg clk;
// wires                                               
wire [7:0] Q;
wire QH;

wire sampler;                             

// assign statements (if any)                          
singlechip_74ls595_test i1 (
// port map - connection between master ports and signals/registers   
	.G(G),
	.Q(Q),
	.QH(QH),
	.RCK(RCK),
	.SCK(SCK),
	.SCLR(SCLR),
	.SI(SI),
	.clk(clk)
);

// G
initial
begin
	G = 1'b0;
	G = #500000 1'b1;
	G = #440000 1'b0;
end 

// RCK
always
begin
	RCK = 1'b0;
	RCK = #5000 1'b1;
	#5000;
end 

// SCK
always
begin
	SCK = 1'b0;
	SCK = #5000 1'b1;
	#5000;
end 

// SCLR
initial
begin
	SCLR = 1'b1;
	SCLR = #340000 1'b0;
	SCLR = #500000 1'b1;
end 

// SI
initial
begin
	SI = 1'b1;
	SI = #10000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

singlechip_74ls595_test_vlg_sample_tst tb_sample (
	.G(G),
	.RCK(RCK),
	.SCK(SCK),
	.SCLR(SCLR),
	.SI(SI),
	.clk(clk),
	.sampler_tx(sampler)
);

singlechip_74ls595_test_vlg_check_tst tb_out(
	.Q(Q),
	.QH(QH),
	.sampler_rx(sampler)
);
endmodule

