// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2018 19:23:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    selecting_machine_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module selecting_machine_test_vlg_sample_tst(
	BTN,
	clk,
	rst,
	sampler_tx
);
input [6:0] BTN;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(BTN or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module selecting_machine_test_vlg_check_tst (
	col,
	digit_cath,
	digit_scan,
	row,
	sampler_rx
);
input [7:0] col;
input [5:0] digit_cath;
input [7:0] digit_scan;
input [7:0] row;
input sampler_rx;

reg [7:0] col_expected;
reg [5:0] digit_cath_expected;
reg [7:0] digit_scan_expected;
reg [7:0] row_expected;

reg [7:0] col_prev;
reg [5:0] digit_cath_prev;
reg [7:0] digit_scan_prev;
reg [7:0] row_prev;

reg [7:0] col_expected_prev;
reg [5:0] digit_cath_expected_prev;
reg [7:0] digit_scan_expected_prev;
reg [7:0] row_expected_prev;

reg [7:0] last_col_exp;
reg [5:0] last_digit_cath_exp;
reg [7:0] last_digit_scan_exp;
reg [7:0] last_row_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	col_prev = col;
	digit_cath_prev = digit_cath;
	digit_scan_prev = digit_scan;
	row_prev = row;
end

// update expected /o prevs

always @(trigger)
begin
	col_expected_prev = col_expected;
	digit_cath_expected_prev = digit_cath_expected;
	digit_scan_expected_prev = digit_scan_expected;
	row_expected_prev = row_expected;
end


// expected col[ 7 ]
initial
begin
	col_expected[7] = 1'bX;
end 
// expected col[ 6 ]
initial
begin
	col_expected[6] = 1'bX;
end 
// expected col[ 5 ]
initial
begin
	col_expected[5] = 1'bX;
end 
// expected col[ 4 ]
initial
begin
	col_expected[4] = 1'bX;
end 
// expected col[ 3 ]
initial
begin
	col_expected[3] = 1'bX;
end 
// expected col[ 2 ]
initial
begin
	col_expected[2] = 1'bX;
end 
// expected col[ 1 ]
initial
begin
	col_expected[1] = 1'bX;
end 
// expected col[ 0 ]
initial
begin
	col_expected[0] = 1'bX;
end 
// expected digit_cath[ 5 ]
initial
begin
	digit_cath_expected[5] = 1'bX;
end 
// expected digit_cath[ 4 ]
initial
begin
	digit_cath_expected[4] = 1'bX;
end 
// expected digit_cath[ 3 ]
initial
begin
	digit_cath_expected[3] = 1'bX;
end 
// expected digit_cath[ 2 ]
initial
begin
	digit_cath_expected[2] = 1'bX;
end 
// expected digit_cath[ 1 ]
initial
begin
	digit_cath_expected[1] = 1'bX;
end 
// expected digit_cath[ 0 ]
initial
begin
	digit_cath_expected[0] = 1'bX;
end 
// expected digit_scan[ 7 ]
initial
begin
	digit_scan_expected[7] = 1'bX;
end 
// expected digit_scan[ 6 ]
initial
begin
	digit_scan_expected[6] = 1'bX;
end 
// expected digit_scan[ 5 ]
initial
begin
	digit_scan_expected[5] = 1'bX;
end 
// expected digit_scan[ 4 ]
initial
begin
	digit_scan_expected[4] = 1'bX;
end 
// expected digit_scan[ 3 ]
initial
begin
	digit_scan_expected[3] = 1'bX;
end 
// expected digit_scan[ 2 ]
initial
begin
	digit_scan_expected[2] = 1'bX;
end 
// expected digit_scan[ 1 ]
initial
begin
	digit_scan_expected[1] = 1'bX;
end 
// expected digit_scan[ 0 ]
initial
begin
	digit_scan_expected[0] = 1'bX;
end 
// expected row[ 7 ]
initial
begin
	row_expected[7] = 1'bX;
end 
// expected row[ 6 ]
initial
begin
	row_expected[6] = 1'bX;
end 
// expected row[ 5 ]
initial
begin
	row_expected[5] = 1'bX;
end 
// expected row[ 4 ]
initial
begin
	row_expected[4] = 1'bX;
end 
// expected row[ 3 ]
initial
begin
	row_expected[3] = 1'bX;
end 
// expected row[ 2 ]
initial
begin
	row_expected[2] = 1'bX;
end 
// expected row[ 1 ]
initial
begin
	row_expected[1] = 1'bX;
end 
// expected row[ 0 ]
initial
begin
	row_expected[0] = 1'bX;
end 
// generate trigger
always @(col_expected or col or digit_cath_expected or digit_cath or digit_scan_expected or digit_scan or row_expected or row)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected col = %b | expected digit_cath = %b | expected digit_scan = %b | expected row = %b | ",col_expected_prev,digit_cath_expected_prev,digit_scan_expected_prev,row_expected_prev);
	$display("| real col = %b | real digit_cath = %b | real digit_scan = %b | real row = %b | ",col_prev,digit_cath_prev,digit_scan_prev,row_prev);
`endif
	if (
		( col_expected_prev[0] !== 1'bx ) && ( col_prev[0] !== col_expected_prev[0] )
		&& ((col_expected_prev[0] !== last_col_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[0] = col_expected_prev[0];
	end
	if (
		( col_expected_prev[1] !== 1'bx ) && ( col_prev[1] !== col_expected_prev[1] )
		&& ((col_expected_prev[1] !== last_col_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[1] = col_expected_prev[1];
	end
	if (
		( col_expected_prev[2] !== 1'bx ) && ( col_prev[2] !== col_expected_prev[2] )
		&& ((col_expected_prev[2] !== last_col_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[2] = col_expected_prev[2];
	end
	if (
		( col_expected_prev[3] !== 1'bx ) && ( col_prev[3] !== col_expected_prev[3] )
		&& ((col_expected_prev[3] !== last_col_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[3] = col_expected_prev[3];
	end
	if (
		( col_expected_prev[4] !== 1'bx ) && ( col_prev[4] !== col_expected_prev[4] )
		&& ((col_expected_prev[4] !== last_col_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[4] = col_expected_prev[4];
	end
	if (
		( col_expected_prev[5] !== 1'bx ) && ( col_prev[5] !== col_expected_prev[5] )
		&& ((col_expected_prev[5] !== last_col_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[5] = col_expected_prev[5];
	end
	if (
		( col_expected_prev[6] !== 1'bx ) && ( col_prev[6] !== col_expected_prev[6] )
		&& ((col_expected_prev[6] !== last_col_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[6] = col_expected_prev[6];
	end
	if (
		( col_expected_prev[7] !== 1'bx ) && ( col_prev[7] !== col_expected_prev[7] )
		&& ((col_expected_prev[7] !== last_col_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port col[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", col_expected_prev);
		$display ("     Real value = %b", col_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_col_exp[7] = col_expected_prev[7];
	end
	if (
		( digit_cath_expected_prev[0] !== 1'bx ) && ( digit_cath_prev[0] !== digit_cath_expected_prev[0] )
		&& ((digit_cath_expected_prev[0] !== last_digit_cath_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_cath[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_cath_expected_prev);
		$display ("     Real value = %b", digit_cath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_digit_cath_exp[0] = digit_cath_expected_prev[0];
	end
	if (
		( digit_cath_expected_prev[1] !== 1'bx ) && ( digit_cath_prev[1] !== digit_cath_expected_prev[1] )
		&& ((digit_cath_expected_prev[1] !== last_digit_cath_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_cath[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_cath_expected_prev);
		$display ("     Real value = %b", digit_cath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_digit_cath_exp[1] = digit_cath_expected_prev[1];
	end
	if (
		( digit_cath_expected_prev[2] !== 1'bx ) && ( digit_cath_prev[2] !== digit_cath_expected_prev[2] )
		&& ((digit_cath_expected_prev[2] !== last_digit_cath_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_cath[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_cath_expected_prev);
		$display ("     Real value = %b", digit_cath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_digit_cath_exp[2] = digit_cath_expected_prev[2];
	end
	if (
		( digit_cath_expected_prev[3] !== 1'bx ) && ( digit_cath_prev[3] !== digit_cath_expected_prev[3] )
		&& ((digit_cath_expected_prev[3] !== last_digit_cath_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_cath[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_cath_expected_prev);
		$display ("     Real value = %b", digit_cath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_digit_cath_exp[3] = digit_cath_expected_prev[3];
	end
	if (
		( digit_cath_expected_prev[4] !== 1'bx ) && ( digit_cath_prev[4] !== digit_cath_expected_prev[4] )
		&& ((digit_cath_expected_prev[4] !== last_digit_cath_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_cath[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_cath_expected_prev);
		$display ("     Real value = %b", digit_cath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_digit_cath_exp[4] = digit_cath_expected_prev[4];
	end
	if (
		( digit_cath_expected_prev[5] !== 1'bx ) && ( digit_cath_prev[5] !== digit_cath_expected_prev[5] )
		&& ((digit_cath_expected_prev[5] !== last_digit_cath_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_cath[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_cath_expected_prev);
		$display ("     Real value = %b", digit_cath_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_digit_cath_exp[5] = digit_cath_expected_prev[5];
	end
	if (
		( digit_scan_expected_prev[0] !== 1'bx ) && ( digit_scan_prev[0] !== digit_scan_expected_prev[0] )
		&& ((digit_scan_expected_prev[0] !== last_digit_scan_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[0] = digit_scan_expected_prev[0];
	end
	if (
		( digit_scan_expected_prev[1] !== 1'bx ) && ( digit_scan_prev[1] !== digit_scan_expected_prev[1] )
		&& ((digit_scan_expected_prev[1] !== last_digit_scan_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[1] = digit_scan_expected_prev[1];
	end
	if (
		( digit_scan_expected_prev[2] !== 1'bx ) && ( digit_scan_prev[2] !== digit_scan_expected_prev[2] )
		&& ((digit_scan_expected_prev[2] !== last_digit_scan_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[2] = digit_scan_expected_prev[2];
	end
	if (
		( digit_scan_expected_prev[3] !== 1'bx ) && ( digit_scan_prev[3] !== digit_scan_expected_prev[3] )
		&& ((digit_scan_expected_prev[3] !== last_digit_scan_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[3] = digit_scan_expected_prev[3];
	end
	if (
		( digit_scan_expected_prev[4] !== 1'bx ) && ( digit_scan_prev[4] !== digit_scan_expected_prev[4] )
		&& ((digit_scan_expected_prev[4] !== last_digit_scan_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[4] = digit_scan_expected_prev[4];
	end
	if (
		( digit_scan_expected_prev[5] !== 1'bx ) && ( digit_scan_prev[5] !== digit_scan_expected_prev[5] )
		&& ((digit_scan_expected_prev[5] !== last_digit_scan_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[5] = digit_scan_expected_prev[5];
	end
	if (
		( digit_scan_expected_prev[6] !== 1'bx ) && ( digit_scan_prev[6] !== digit_scan_expected_prev[6] )
		&& ((digit_scan_expected_prev[6] !== last_digit_scan_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[6] = digit_scan_expected_prev[6];
	end
	if (
		( digit_scan_expected_prev[7] !== 1'bx ) && ( digit_scan_prev[7] !== digit_scan_expected_prev[7] )
		&& ((digit_scan_expected_prev[7] !== last_digit_scan_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit_scan[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_scan_expected_prev);
		$display ("     Real value = %b", digit_scan_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_digit_scan_exp[7] = digit_scan_expected_prev[7];
	end
	if (
		( row_expected_prev[0] !== 1'bx ) && ( row_prev[0] !== row_expected_prev[0] )
		&& ((row_expected_prev[0] !== last_row_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[0] = row_expected_prev[0];
	end
	if (
		( row_expected_prev[1] !== 1'bx ) && ( row_prev[1] !== row_expected_prev[1] )
		&& ((row_expected_prev[1] !== last_row_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[1] = row_expected_prev[1];
	end
	if (
		( row_expected_prev[2] !== 1'bx ) && ( row_prev[2] !== row_expected_prev[2] )
		&& ((row_expected_prev[2] !== last_row_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[2] = row_expected_prev[2];
	end
	if (
		( row_expected_prev[3] !== 1'bx ) && ( row_prev[3] !== row_expected_prev[3] )
		&& ((row_expected_prev[3] !== last_row_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[3] = row_expected_prev[3];
	end
	if (
		( row_expected_prev[4] !== 1'bx ) && ( row_prev[4] !== row_expected_prev[4] )
		&& ((row_expected_prev[4] !== last_row_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[4] = row_expected_prev[4];
	end
	if (
		( row_expected_prev[5] !== 1'bx ) && ( row_prev[5] !== row_expected_prev[5] )
		&& ((row_expected_prev[5] !== last_row_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[5] = row_expected_prev[5];
	end
	if (
		( row_expected_prev[6] !== 1'bx ) && ( row_prev[6] !== row_expected_prev[6] )
		&& ((row_expected_prev[6] !== last_row_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[6] = row_expected_prev[6];
	end
	if (
		( row_expected_prev[7] !== 1'bx ) && ( row_prev[7] !== row_expected_prev[7] )
		&& ((row_expected_prev[7] !== last_row_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_row_exp[7] = row_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module selecting_machine_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [6:0] BTN;
reg clk;
reg rst;
// wires                                               
wire [7:0] col;
wire [5:0] digit_cath;
wire [7:0] digit_scan;
wire [7:0] row;

wire sampler;                             

// assign statements (if any)                          
selecting_machine_test i1 (
// port map - connection between master ports and signals/registers   
	.BTN(BTN),
	.clk(clk),
	.col(col),
	.digit_cath(digit_cath),
	.digit_scan(digit_scan),
	.row(row),
	.rst(rst)
);
// BTN[ 6 ]
initial
begin
	BTN[6] = 1'b0;
end 
// BTN[ 5 ]
initial
begin
	BTN[5] = 1'b0;
end 
// BTN[ 4 ]
initial
begin
	BTN[4] = 1'b0;
end 
// BTN[ 3 ]
initial
begin
	BTN[3] = 1'b0;
end 
// BTN[ 2 ]
initial
begin
	BTN[2] = 1'b0;
end 
// BTN[ 1 ]
initial
begin
	BTN[1] = 1'b0;
end 
// BTN[ 0 ]
initial
begin
	BTN[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

selecting_machine_test_vlg_sample_tst tb_sample (
	.BTN(BTN),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

selecting_machine_test_vlg_check_tst tb_out(
	.col(col),
	.digit_cath(digit_cath),
	.digit_scan(digit_scan),
	.row(row),
	.sampler_rx(sampler)
);
endmodule

