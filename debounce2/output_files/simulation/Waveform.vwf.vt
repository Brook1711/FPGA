// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2018 14:29:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          my_lock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module my_lock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key;
reg [7:0] keys;
reg rst;
// wires                                               
wire [1:0] digit_cath;
wire [7:0] digit_seg;
wire led_N5_R;
wire led_R4_B;
wire led_T6_G;
wire [7:0] little_led;

// assign statements (if any)                          
my_lock i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.digit_cath(digit_cath),
	.digit_seg(digit_seg),
	.key(key),
	.keys(keys),
	.led_N5_R(led_N5_R),
	.led_R4_B(led_R4_B),
	.led_T6_G(led_T6_G),
	.little_led(little_led),
	.rst(rst)
);
initial 
begin 
#1000000 $stop;
end 

// clk
initial
begin
	clk = 1'b0;
end 

// key
initial
begin
	key = 1'b0;
end 
// keys[ 7 ]
initial
begin
	keys[7] = 1'b0;
end 
// keys[ 6 ]
initial
begin
	keys[6] = 1'b0;
	keys[6] = #120000 1'b1;
	keys[6] = #600000 1'b0;
end 
// keys[ 5 ]
initial
begin
	keys[5] = 1'b0;
end 
// keys[ 4 ]
initial
begin
	keys[4] = 1'b0;
	keys[4] = #120000 1'b1;
	keys[4] = #600000 1'b0;
end 
// keys[ 3 ]
initial
begin
	keys[3] = 1'b0;
end 
// keys[ 2 ]
initial
begin
	keys[2] = 1'b0;
	keys[2] = #120000 1'b1;
	keys[2] = #600000 1'b0;
end 
// keys[ 1 ]
initial
begin
	keys[1] = 1'b0;
end 
// keys[ 0 ]
initial
begin
	keys[0] = 1'b0;
	keys[0] = #120000 1'b1;
	keys[0] = #600000 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

