// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2018 20:30:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    JK_flip_flop_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module JK_flip_flop_test_vlg_sample_tst(
	J,
	K,
	RD,
	SD,
	clk,
	rst,
	sampler_tx
);
input  J;
input  K;
input  RD;
input  SD;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(J or K or RD or SD or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module JK_flip_flop_test_vlg_check_tst (
	Q,
	Q_,
	sampler_rx
);
input  Q;
input  Q_;
input sampler_rx;

reg  Q_expected;
reg  Q__expected;

reg  Q_prev;
reg  Q__prev;

reg  Q_expected_prev;
reg  Q__expected_prev;

reg  last_Q_exp;
reg  last_Q__exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q_prev = Q;
	Q__prev = Q_;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
	Q__expected_prev = Q__expected;
end



// expected Q
initial
begin
	Q_expected = 1'bX;
end 

// expected Q_
initial
begin
	Q__expected = 1'bX;
end 
// generate trigger
always @(Q_expected or Q or Q__expected or Q_)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q = %b | expected Q_ = %b | ",Q_expected_prev,Q__expected_prev);
	$display("| real Q = %b | real Q_ = %b | ",Q_prev,Q__prev);
`endif
	if (
		( Q_expected_prev !== 1'bx ) && ( Q_prev !== Q_expected_prev )
		&& ((Q_expected_prev !== last_Q_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp = Q_expected_prev;
	end
	if (
		( Q__expected_prev !== 1'bx ) && ( Q__prev !== Q__expected_prev )
		&& ((Q__expected_prev !== last_Q__exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q__expected_prev);
		$display ("     Real value = %b", Q__prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q__exp = Q__expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module JK_flip_flop_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg J;
reg K;
reg RD;
reg SD;
reg clk;
reg rst;
// wires                                               
wire Q;
wire Q_;

wire sampler;                             

// assign statements (if any)                          
JK_flip_flop_test i1 (
// port map - connection between master ports and signals/registers   
	.J(J),
	.K(K),
	.Q(Q),
	.Q_(Q_),
	.RD(RD),
	.SD(SD),
	.clk(clk),
	.rst(rst)
);

// J
initial
begin
	J = 1'b0;
	J = #20000 1'b1;
	J = #340000 1'b0;
end 

// K
initial
begin
	K = 1'b0;
	K = #20000 1'b1;
	K = #340000 1'b0;
end 

// RD
initial
begin
	RD = 1'b1;
	RD = #360000 1'b0;
end 

// SD
initial
begin
	SD = 1'b1;
	SD = #360000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

JK_flip_flop_test_vlg_sample_tst tb_sample (
	.J(J),
	.K(K),
	.RD(RD),
	.SD(SD),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

JK_flip_flop_test_vlg_check_tst tb_out(
	.Q(Q),
	.Q_(Q_),
	.sampler_rx(sampler)
);
endmodule

