// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2018 08:25:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    frequency_divider_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module frequency_divider_top_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module frequency_divider_top_vlg_check_tst (
	clkout,
	sampler_rx
);
input  clkout;
input sampler_rx;

reg  clkout_expected;

reg  clkout_prev;

reg  clkout_expected_prev;

reg  last_clkout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	clkout_prev = clkout;
end

// update expected /o prevs

always @(trigger)
begin
	clkout_expected_prev = clkout_expected;
end



// expected clkout
initial
begin
	clkout_expected = 1'bX;
end 
// generate trigger
always @(clkout_expected or clkout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clkout = %b | ",clkout_expected_prev);
	$display("| real clkout = %b | ",clkout_prev);
`endif
	if (
		( clkout_expected_prev !== 1'bx ) && ( clkout_prev !== clkout_expected_prev )
		&& ((clkout_expected_prev !== last_clkout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clkout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clkout_expected_prev);
		$display ("     Real value = %b", clkout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clkout_exp = clkout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module frequency_divider_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire clkout;

wire sampler;                             

// assign statements (if any)                          
frequency_divider_top i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clkout(clkout)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

frequency_divider_top_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

frequency_divider_top_vlg_check_tst tb_out(
	.clkout(clkout),
	.sampler_rx(sampler)
);
endmodule

